<public:component id="edx" xmlns:public="urn:HTMLComponent">

<public:property name="edxtemplate" />		// nombre de la vista a asociar
<public:property name="edxpath"       />	// objeto para manejar nodos bajo xpath
<public:property name="xIndex"       />
<public:property name="xmlurl"        />	// documento xml a editar
<public:property name="viewurl"       />	// Plantilla EDX para editar el documento

<public:method   name="getXmlNode"	  />	// devuelve el nodo XML para editar

<!--public:method   name="getViewDocRoot"/>	// document element of view XML
<public:method   name="getEditDocRoot"/>	// document element of edit XML -->

<public:method   name="getXml"	 	  />	// devuelve el documento XML como una cadena
<public:method   name="enableIcons"   />	// encender / apagar iconos

<public:method   name="canMoveUp"     />	// si la selección se puede mover o no
<public:method   name="canMoveDown"   />	// si el nodo seleccionado se puede mover hacia abajo en el documento
<public:method   name="moveUp"        />	// mueve el nodo seleccionado una posición hacia arriba
<public:method   name="moveDown"      />	// mueve el nodo seleccionado una posición hacia abajo

<public:method   name="canUndo"       />	// revisa si se puede deshacer
<public:method   name="canRedo"       />	// revisa si se puede rehacer
<public:method   name="undo"          />	// deshacer una edición
<public:method   name="redo"          />	// rehacer una edición
<public:method   name="clearHistory"  />	// borra la caché de edición

<public:method   name="canApplyTag"   />	// miramos si se puede aplicar una etiqueta al nodo seleccionado
<public:method   name="applyTag"      />	// aplicamos la etiqueta en el nodo



<public:method   name="edxCommand"    />	// envia un comando al editor
<!--public:property name="eobj"          />	// declaración interna de un nodo edx para el nodo raiz  -->

<public:attach   event="ondocumentready" handler="doInit"     />

<public:event    name="onEdxDocumentChange"      id="edxdocumentchange"  />
<public:event    name="onEdxSelectionChange"     id="edxselectionchange"  />
<public:event    name="onSelectionChange"     id="onSelectionChange"  />

<script language="javascript" type="text/javascript" src="../xmd/js/edxnode.js"></script>
<script language="javascript" type="text/javascript" src="../xmd/js/util.js"></script>
<script language="javascript" type="text/javascript" src="../xmd/js/root.js"></script>
<script language="javascript" type="text/javascript" src="../xmd/js/view.js"></script>
<script language="javascript" type="text/javascript" src="../xmd/js/field.js"></script>
<script language="javascript" type="text/javascript" src="../xmd/js/widget.js"></script>
<script language="javascript" type="text/javascript" src="../xmd/js/container.js"></script>
<script language="javascript" type="text/javascript" src="../xmd/js/region.js"></script>
<script language="javascript" type="text/javascript" src="../xmd/js/xmlmgr.js"></script>
<script language="javascript" type="text/javascript" src="../xmd/js/gestionmod.js"></script>

<script language="javascript" type="text/javascript">
//<![CDATA[
var eobj;		// ref to edxnode class object
var rootid;		// root ID




var dex = new Array();

function doInit(){

	// verificamos el navegador
	var version = window.navigator.appVersion;

	if (navegador != "ie")
			{
				ximeditor = document.getElementById('edxid');
			}
	else
			{
				ximeditor = this;
			}
	
	

	if (navegador != "ie" && navegador!= "firefox15")
		{
		err( "ximEDITOR necesita un navegador Internet Explorer 6.0 o Firefox 1.5 o versiones posteriores para funcionar correctamente." );
		return;
		}

	
	/*
	if( edxtemplate == null )
	{
		err( "No se encuentra la propiedad 'edxtemplate' o es nulo para la plantilla." );
		return;
	}
	*/
	if( ximeditor.getAttribute("edxpath") == null )
		ximeditor.setAttribute("edxpath", "/");
	
	ximeditor.eobj = new root( null, ximeditor.getAttribute('edxtemplate'), ximeditor.getAttribute('edxpath') );
	
	// associate with HTML since we're already here
	ximeditor.eobj.associate( ximeditor );
	this.edxid = ximeditor.eobj.id;
	rootid = this.id;
	// see if we're ready right away to load up
	ximeditor.eobj.loadDocs();
	
    // attach onpropertychange
    attachEvent("onpropertychange", doPropChange);
	attachEvent("onEdxDocumentChange", docChange);
	attachEvent("onEdxSelectionChange", selChange);
if (navegador == "firefox15")
	{	
	document.getElementById('edxid').attachEvent("onEdxDocumentChange", docChange); 
	document.getElementById('edxid').attachEvent("edxselectionchange", selChange); 
	
	}
	

}

//
//						doInit
//


//
//						doPropChange
//
function doPropChange(event)
{

if (navegador == "firefox15")
		{
		var eTarget = event.target || event.srcElement;
		var propertyName = event.propertyName;
		
		}
	else
		{
	    var propertyName = window.event.propertyName;
		}

	//
	//  Detach the onpropertychange event to prevent it from firing while
	//  the changes are handled
	//
	detachEvent("onpropertychange", doPropChange);

	switch(propertyName)
	{
		case "xmlurl":
			// instantiate fresh personality object
			this.innerHTML = "";
			this.eobj = new root( null, this.edxtemplate, this.edxpath );
			// load new docs
			eobj.associate( this );
			eobj.loadDocs();
			break;

		case "viewurl":
			eobj.loadDocs();
			break;

		case "edxpath":
			err( "La propiedad edxpath no puede ser modificada dinamicamente en un nodo" );
			break;
			
		default:
			break;
	}

	//  Re-attach the onpropertychange event
	attachEvent("onpropertychange", doPropChange);
}

//
//						getXmlNode
//
//	Gets the node in the XML tree assoc'd with this node.
//
function getXmlNode()
{
	return eobj.getXmlNode();
}

//
//						getXml
//
//	Returns the document XML as a string
//
function getXml()
{
	var node = this.eobj.getEditDocRoot();
	if( node != null )
		return node.xml;
	else
		return "";
}

//
//						enableIcons
//
function enableIcons( flg )
{
	var i;
	for( i = 0; i < this.all.length; i++ )
	{
		var h = this.all(i);
		try
		{
			if( h.edxtemplate != null && h.edxtemplate.substr(0,11) == "widget:icon" )
			{
				h.style.display = flg ? "block" : "none";
			}
		}
		catch(e) {}
	}
}

//
//						canMoveUp
//
//	Looks for selected item and checks to see if it can move up.
//
function canMoveUp()
{
	if( eobj.selectedRegion != null )
	{
		r = eobj.selectedRegion;
		if( r.parent == null )	// trap for root node
			return false;
		if( r.parent.type == "container" )
		{
			var b = r.parent.canMoveUp( r );
			return b;
		}
	}
	return false;
}

//
//						canMoveDown
//
//	Looks for selected item and checks to see if it can move down.
//
function canMoveDown()
{
	if( eobj.selectedRegion != null )
	{
		r = eobj.selectedRegion;
		if( r.parent == null )	// trap for root node
			return false;
		if( r.parent.type == "container" )
		{
			return r.parent.canMoveDown( r );
		}
	}
	return false;
}

//
//						moveUp
//
//	Looks for selected item and checks to see if it can move up.
//
function moveUp()
{
	if( eobj.selectedRegion != null )
	{
		r = eobj.selectedRegion;
		if( r.parent.type == "container" )
		{
			r.parent.moveUp( r );
		}
	}
}

//
//						moveDown
//
//	Looks for selected item and checks to see if it can move down.
//
function moveDown()
{
	if( eobj.selectedRegion != null )
	{
		r = eobj.selectedRegion;
		if( r.parent.type == "container" )
		{
			r.parent.moveDown( r );
		}
	}
}

//
//						canApplyTag
//
//	Sees if we can apply spec'd tag to all regions of current field selection.
//
function canApplyTag( sTag )
{
	return eobj.canApplyTag( sTag );
}


//
//						applyTag
//
//	Wraps current field selection in spec'd tag.
//
function applyTag( sTag )
{
	eobj.applyTag( sTag );
}



//
//						edxCommand
//
function edxCommand( sCmd )
{
	switch( sCmd )
	{
	case "Bold":
	case "Underline":
	case "Italic":
	case "CreateLink":
		var ff = eobj.focusField;
		if( ff != null && ff.fieldType == "rich" )
		{
			ff.hobj.focus();
			window.document.execCommand( sCmd );
		}
		break;
	default:
		break;
	}
}

//
//						canUndo
//
function canUndo()
{
	return eobj.getXmlManager().canUndo();
}

//
//						canRedo
//
function canRedo()
{
	return eobj.getXmlManager().canRedo();
}


//
//						undo
//
function undo()
{
	eobj.getXmlManager().undo();
}

//
//						redo
//
function redo()
{
	eobj.getXmlManager().redo();
}

//
//						clearHistory
//
function clearHistory()
{
	eobj.getXmlManager().clearHistory();
}


//]]>
</script>
</public:component>